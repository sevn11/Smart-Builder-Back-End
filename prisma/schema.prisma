// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  hash              String?
  name              String?
  userType          String   @map("user_type")
  isTosAccepted     Boolean  @default(false) @map("is_tos_accepted")
  tosAcceptanceTime DateTime @default(now()) @map("tos_acceptance_time")
  tosVersion        String?  @default("v1") @map("tos_version")
  companyId         Int?     @map("company_id")
  company           Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  isActive      Boolean        @default(true) @map("is_active")
  PermissionSet PermissionSet?

  passwordResetCode Int?    @map("password_reset_code")
  invitationToken   String? @map("invitation_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Company {
  id                     Int                     @id @default(autoincrement())
  name                   String?
  address                String?
  contact                String?
  phoneNumber            String?                 @map("phone_number")
  email                  String?
  website                String?
  logo                   String?
  saleTaxRate            Float?                  @map("sale_tax_rate")
  users                  User[]
  customers              Customer[]
  jobs                   Job[]
  categories             Category[]
  questionnaireTemplates QuestionnaireTemplate[]
  isActive               Boolean        @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("companies")
}

model PermissionSet {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique @map("user_id")
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullAccess     Boolean @default(false) @map("full_access")
  specifications Boolean @default(false)
  questionnaire  Boolean @default(false)
  selection      Boolean @default(false)
  schedule       Boolean @default(false)
  viewOnly       Boolean @default(true) @map("view_only")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("permission_sets")
}

model Customer {
  id             Int       @id @default(autoincrement())
  name           String
  address        String?
  telephone      String?
  mobileNumber1  String?   @map("mobile_number_1")
  mobileNumber2  String?   @map("mobile_number_2")
  emailAddress1  String?   @map("email_address_1")
  emailAddress2  String?   @map("email_address_2")
  employer1      String?   @map("employer_1")
  employer2      String?   @map("employer_2")
  workTelephone1 String?   @map("work_telephone_1")
  workTelephone2 String?   @map("work_telephone_2")
  isDeleted      Boolean?  @default(false) @map("is_deleted")
  meetDate       DateTime? @default(now()) @map("meet_date")
  companyId      Int       @map("company_id")
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobs           Job[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("customers")
}

model Job {
  id Int @id @default(autoincrement())

  status      String
  description String?
  lotBudget   String? @map("lot_budget")
  totalBudget String? @map("total_budget")
  financing   String?
  timeFrame   String? @map("time_frame")
  aboutUs     String? @map("about_us")

  isClosed           Boolean @default(false) @map("is_closed")
  isDeleted          Boolean @default(false) @map("is_deleted")
  isGasAtLot         Boolean @default(false) @map("is_gas_at_lot")
  isWaterAtLot       Boolean @default(false) @map("is_water_at_lot")
  isElectricityAtLot Boolean @default(false) @map("is_electricity_at_lot")
  isSewerAtLot       Boolean @default(false) @map("is_sewer_at_lot")

  companyId Int     @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  customerId Int      @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("jobs")
}

model Category {
  id                      Int                    @id @default(autoincrement())
  name                    String
  isDeleted               Boolean                @default(false) @map("is_deleted")
  linkToPhase             Boolean                @default(false) @map("link_to_phase")
  linkToSelection         Boolean                @default(false) @map("link_to_selection")
  linkToQuestionnaire     Boolean                @default(true) @map("link_to_questionnaire")
  isCompanyCategory       Boolean                @default(false) @map("is_company_category")
  companyId               Int?                   @map("company_id")
  company                 Company?               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  questionnaireOrder      Int                    @map("questionnaire_order")
  questionnaireTemplateId Int?                   @map("questionnaire_template_id")
  questionnaireTemplate   QuestionnaireTemplate? @relation(fields: [questionnaireTemplateId], references: [id], onDelete: Cascade)
  questions               TemplateQuestion[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model QuestionnaireTemplate {
  id                Int      @id @default(autoincrement())
  name              String
  isDeleted         Boolean  @default(false) @map("is_deleted")
  isCompanyTemplate Boolean  @default(true) @map("is_company_template")
  companyId         Int?     @map("company_id")
  company           Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  questions  TemplateQuestion[]
  categories Category[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("questionnaire_template")
}

model TemplateQuestion {
  id                  Int     @id @default(autoincrement())
  isDeleted           Boolean @map("is_deleted")
  linkToPhase         Boolean @default(false) @map("link_to_phase")
  linkToSelection     Boolean @default(false) @map("link_to_selection")
  linkToQuestionnaire Boolean @default(true) @map("link_to_questionnaire")
  question            String
  questionType        String

  questionnaireTemplateId Int?                   @map("questionnaire_template_id")
  questionnaireTemplate   QuestionnaireTemplate? @relation(fields: [questionnaireTemplateId], references: [id], onDelete: Cascade)
  categoryId              Int?                   @map("category_id")
  category                Category?              @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("template_question")
}

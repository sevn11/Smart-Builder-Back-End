// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  hash              String?
  name              String?
  userType          String   @map("user_type")
  isTosAccepted     Boolean  @default(false) @map("is_tos_accepted")
  tosAcceptanceTime DateTime @default(now()) @map("tos_acceptance_time")
  tosVersion        String?  @default("v1") @map("tos_version")
  companyId         Int?     @map("company_id")
  company           Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isActive      Boolean        @default(true) @map("is_active")
  isDeleted     Boolean?       @default(false) @map("is_deleted")
  PermissionSet PermissionSet?
  stripeCustomerId   String?  @map("stripe_customer_id")
  subscriptionId    String?  @map("subscription_id")
  productId         String?  @map("product_id")

  passwordResetCode Int?    @map("password_reset_code")
  invitationToken   String? @map("invitation_token")

  googleAccessToken String? @map("google_access_token")
  googleRefreshToken String? @map("google_refresh_token")
  calendarId        String? @map("calendar_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  PaymentLog      PaymentLog[]
  
  @@map("users")
}

model Company {
  id                     Int                     @id @default(autoincrement())
  name                   String?
  address                String?
  contact                String?
  phoneNumber            String?                 @map("phone_number")
  email                  String?
  website                String?
  logo                   String?
  saleTaxRate            Float?                  @map("sale_tax_rate")
  users                  User[]
  customers              Customer[]
  jobs                   Job[]
  projectDescription     ProjectDescription[]
  extraFee               Decimal                 @map("extra_fee") @db.Decimal(10, 2) @default(20.00)
  categories             Category[]
  contractors            Contractor[]
  JobContractor          JobContractor[]
  JobSchedule            JobSchedule[]
  JobProjectEstimatorHeader    JobProjectEstimatorHeader[]
  ContractorFiles        ContractorFiles[]
  ContractorPhase        ContractorPhase[]
  questionnaireTemplates QuestionnaireTemplate[]
  paymentSchedules       PaymentSchedule[]
  CashFlow               CashFlow[]
  projectEstimatorTemplates     ProjectEstimatorTemplate[]
  projectEstimatorTemplateHeader ProjectEstimatorTemplateHeader[]
  isActive               Boolean                 @default(true) @map("is_active")
  isDeleted              Boolean?                @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("companies")
}

model PermissionSet {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullAccess     Boolean  @default(false) @map("full_access")
  specifications Boolean  @default(false)
  questionnaire  Boolean  @default(false)
  selection      Boolean  @default(false)
  schedule       Boolean  @default(false)
  viewOnly       Boolean  @default(true) @map("view_only")
  isDeleted      Boolean? @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("permission_sets")
}

model Customer {
  id             Int       @id @default(autoincrement())
  name           String
  address        String?
  state          String?
  city           String?
  zip            String?
  telephone      String?
  mobileNumber1  String?   @map("mobile_number_1")
  mobileNumber2  String?   @map("mobile_number_2")
  emailAddress1  String?   @map("email_address_1")
  emailAddress2  String?   @map("email_address_2")
  employer1      String?   @map("employer_1")
  employer2      String?   @map("employer_2")
  workTelephone1 String?   @map("work_telephone_1")
  workTelephone2 String?   @map("work_telephone_2")
  isDeleted      Boolean?  @default(false) @map("is_deleted")
  meetDate       DateTime? @default(now()) @map("meet_date")
  companyId      Int       @map("company_id")
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobs           Job[]
 
  ContractorFiles        ContractorFiles[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("customers")
}

model Job {
  id Int @id @default(autoincrement())

  status      String
  descriptionId   Int?                  @map("description_id")
  description     ProjectDescription?   @relation(fields: [descriptionId], references: [id], onDelete: SetNull)
  lotBudget   String? @map("lot_budget")
  totalBudget String? @map("total_budget")
  financing   String?
  timeFrame   String? @map("time_frame")
  aboutUs     String? @map("about_us")

  isClosed           Boolean @default(false) @map("is_closed")
  isDeleted          Boolean @default(false) @map("is_deleted")
  isGasAtLot         Boolean @default(false) @map("is_gas_at_lot")
  isWaterAtLot       Boolean @default(false) @map("is_water_at_lot")
  isElectricityAtLot Boolean @default(false) @map("is_electricity_at_lot")
  isSewerAtLot       Boolean @default(false) @map("is_sewer_at_lot")

  calendarColor      String? @map("calendar_color")
  templateName       String? @map("template_name")
  projectAddress     String? @map("project_address")
  projectState       String? @map("project_state")
  projectCity        String? @map("project_city")
  projectZip         String? @map("project_zip")
  
  houseBudget        String? @map("house_budget")
  sizeOfHouse        String? @map("size_of_house")
  referral           String?
  salesTaxStatus     Boolean? @map("sales_tax_status") @default(false)

  JobContractor     JobContractor[]
  JobSchedule       JobSchedule[]
  JobProjectEstimatorHeader JobProjectEstimatorHeader[]
  ContractorFiles        ContractorFiles[]
  paymentSchedules       PaymentSchedule[]

  companyId Int     @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  customerId Int      @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")

  eventId           String?   @map("event_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("jobs")
}

model PaymentLog {
    id              Int       @id @default(autoincrement())
    userId          Int       @map("user_id")
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    paymentId       String?   @map("payment_id")
    amount          Float?    @default(0)
    paymentDate     DateTime? @map("payment_date")
    status          String?  
    response        Json?    

    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")

    @@map("payment_logs")
}

model ProjectDescription {
  id                Int                @id @default(autoincrement())
  name              String
  isDeleted         Boolean?           @default(false) @map("is_deleted")

  companyId         Int?               @map("company_id")
  company           Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)


  jobs              Job[]
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_description")
}

model Category {
  id                      Int                    @id @default(autoincrement())
  name                    String
  isDeleted               Boolean                @default(false) @map("is_deleted")
  linkToPhase             Boolean                @default(false) @map("link_to_phase")
  phaseId                 Int?                   @map("phase_id")
  phase                   ContractorPhase?       @relation(fields: [phaseId], references: [id])
  linkToInitalSelection   Boolean                @default(false) @map("link_to_initial_selection")
  linkToPaintSelection    Boolean                @default(false) @map("link_to_paint_selection")
  linkToQuestionnaire     Boolean                @default(true) @map("link_to_questionnaire")
  isCompanyCategory       Boolean                @default(false) @map("is_company_category")
  companyId               Int?                   @map("company_id")
  company                 Company?               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  questionnaireOrder      Int                    @map("questionnaire_order")
  questionnaireTemplateId Int?                   @map("questionnaire_template_id")
  questionnaireTemplate   QuestionnaireTemplate? @relation(fields: [questionnaireTemplateId], references: [id], onDelete: Cascade)
  questions               TemplateQuestion[]

  contractorIds           Int[] @default([])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model QuestionnaireTemplate {
  id                Int                @id @default(autoincrement())
  name              String
  isDeleted         Boolean            @default(false) @map("is_deleted")
  isCompanyTemplate Boolean            @default(true) @map("is_company_template")
  companyId         Int?               @map("company_id")
  company           Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  templateType      String             @default("Questionnaire")
  questions         TemplateQuestion[]
  categories        Category[]

  projectEstimatorTemplateId   Int?      @map("pet_id")
  projectEstimatorTemplate     ProjectEstimatorTemplate? @relation(fields: [projectEstimatorTemplateId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("questionnaire_template")
}

model TemplateQuestion {
  id                    Int     @id @default(autoincrement())
  isDeleted             Boolean @default(false) @map("is_deleted")
  linkToPhase           Boolean @default(false) @map("link_to_phase")
  linkToInitalSelection Boolean @default(false) @map("link_to_initial_selection")
  linkToPaintSelection  Boolean @default(false) @map("link_to_paint_selection")
  linkToQuestionnaire   Boolean @default(true) @map("link_to_questionnaire")
  question              String
  questionType          String
  multipleOptions       Json?
  answers               TemplateQuestionAnswer[]                
  questionnaireTemplateId Int?                   @map("questionnaire_template_id")
  questionnaireTemplate   QuestionnaireTemplate? @relation(fields: [questionnaireTemplateId], references: [id], onDelete: Cascade)
  categoryId              Int?                   @map("category_id")
  category                Category?              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  phaseId                 Int?                   @map("phase_id")
  phase                   ContractorPhase?       @relation(fields: [phaseId], references: [id])
  questionOrder           Int   @default(0)  @map("question_order")

  contractorIds           Int[] @default([])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("template_question")
}

model TemplateQuestionAnswer {
  
  id                    Int                      @id @default(autoincrement())
  questionId            Int                      @unique @map("question_id") 
  question              TemplateQuestion        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answerIds             String[]                @default([]) 
  answerText            Json?                

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("template_question_answer")
}

model Contractor {
  id                Int                @id @default(autoincrement())
  name              String
  email             String
  phaseId           Int?               @map("phase_id")
  phase             ContractorPhase?   @relation(fields: [phaseId], references: [id])
  companyId         Int?               @map("company_id")
  company           Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isDeleted         Boolean?           @default(false) @map("is_deleted")
  JobContractor     JobContractor[]
  JobSchedule       JobSchedule[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contractors")
}

model JobContractor {
  id                Int                @id @default(autoincrement())
  companyId         Int?               @map("company_id")
  company           Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobId             Int?               @map("job_id")
  job               Job?               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  contractorId      Int?               @map("contractor_id")
  contractor        Contractor?        @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@map("job_contractors")
}

model JobSchedule {
  id                Int                @id @default(autoincrement())
  companyId         Int?               @map("company_id")
  company           Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobId             Int?               @map("job_id")
  job               Job?               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  contractorId      Int?               @map("contractor_id")
  contractor        Contractor?        @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  eventId           String?            @map("event_id")
  startDate         DateTime?          @map("start_date")
  endDate           DateTime?          @map("end_date")
  isDeleted         Boolean?           @default(false) @map("is_deleted")

  @@map("job_schedules")
}

model ContractorPhase {
  id                Int                @id @default(autoincrement())
  companyId         Int?               @map("company_id")
  company           Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name              String
  isDeleted         Boolean?           @default(false) @map("is_deleted")

  contractors       Contractor[]
  categories        Category[]
  templateQuestion  TemplateQuestion[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contractor_phase")
}

model JobProjectEstimatorHeader {
  id                 Int                          @id @default(autoincrement())
  name               String
  companyId          Int?                         @map("company_id")
  company            Company?                     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobId              Int?                         @map("job_id")
  job                Job?                         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  isDeleted          Boolean?                     @default(false) @map("is_deleted")

  JobProjectEstimator                             JobProjectEstimator[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("job_project_estimator_header")
}

model JobProjectEstimator {
  id                Int                @id @default(autoincrement())
  item              String
  description       String
  costType          String?            @map("cost_type")
  quantity          Int
  unitCost          Decimal            @map("unit_cost") @db.Decimal(10, 2) @default(0.00)
  actualCost        Decimal            @map("actual_cost") @db.Decimal(10, 2) @default(0.00)
  grossProfit       Decimal            @map("gross_profit") @db.Decimal(10, 2) @default(0.00)
  contractPrice     Decimal            @map("contract_price") @db.Decimal(10, 2) @default(0.00)
  invoiceId         Int?               @map("invoice_id")
  isLootCost        Boolean?           @default(false) @map("is_loot_cost")
  isDeleted         Boolean?           @default(false) @map("is_deleted")

  jobProjectEstimatorHeaderId          Int? @map("job_project_estimator_header_id")
  jobProjectEstimatorHeader            JobProjectEstimatorHeader? @relation(fields: [jobProjectEstimatorHeaderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("job_project_estimator")
}

model ContractorFiles {
  id                Int                 @id @default(autoincrement())
  companyId         Int?                @map("company_id")
  company           Company?            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customerId        Int                 @map("customer_id")
  customer          Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  jobId             Int?                @map("job_id")
  job               Job?                @relation(fields: [jobId], references: [id], onDelete: Cascade)
  fileName          String
  filePath          String          

  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@map("contractor_files")
}

model TermsAndCondition {
  id                Int                 @id @default(autoincrement())
  content           String
  @@map("terms_and_condition")
}

model PaymentSchedule {
  id                 Int        @id @default(autoincrement())
  paymentDate        DateTime   @map("payment_date")
  amount             Decimal    @db.Decimal(10, 2) @default(0.00)
  companyId          Int?       @map("company_id")
  company            Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  jobId              Int?       @map("job_id")
  job                Job?       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  isDeleted          Boolean?    @default(false) @map("is_deleted")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  draws              PaymentScheduleDraw[]

  @@map("payment_schedule")
}

model PaymentScheduleDraw {
  id                  Int             @id @default(autoincrement())
  paymentDate         DateTime        @map("payment_date")
  amount              Float           @default(0)
  drawPercentage      Float           @map("draw_percentage") @default(0)
  bankFees            Decimal?        @map("bank_fees") @db.Decimal(10, 2) @default(0.00)
  received            Boolean         @default(false)
  paymentScheduleId   Int             @map("payment_schedule_id")
  paymentSchedule     PaymentSchedule @relation(fields: [paymentScheduleId], references: [id], onDelete: Cascade)
  isDeleted           Boolean?        @default(false) @map("is_deleted")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@map("payment_schedule_draw")

}

model CashFlow {
  id                Int                 @id @default(autoincrement())
  companyId         Int?                @map("company_id") @unique
  company           Company?            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  salesDeduction    Float               @default(0) @map("sales_deduction")
  deduction         Float               @default(0)
  depreciation      Float               @default(0)
  expense           Float               @default(0)

  @@map("cash_flow")
}
model ProjectEstimatorTemplate {
  id            Int      @id @default(autoincrement())
  templateName  String
  companyId     Int?      @map("company_id")
  company       Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isDeleted          Boolean?                     @default(false) @map("is_deleted")
  projectEstimatorTemplateHeader     ProjectEstimatorTemplateHeader[]

  questionnaireTemplates  QuestionnaireTemplate[]  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("project_estimator_template")
}

model ProjectEstimatorTemplateHeader {
  id                 Int                          @id @default(autoincrement())
  petId              Int                          @map("project_estimator_template_id")
  pet                ProjectEstimatorTemplate?    @relation(fields: [petId],references: [id], onDelete: Cascade)
  name               String
  companyId          Int?                         @map("company_id")
  company            Company?                     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isDeleted          Boolean?                     @default(false) @map("is_deleted")

  ProjectEstimatorTemplateData    ProjectEstimatorTemplateData[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  headerOrder       Int?  @default(0) @map("header_order")

  @@map("project_estimator_template_header")
}


model ProjectEstimatorTemplateData {
  id                Int                @id @default(autoincrement())
  item              String
  description       String
  costType          String?            @map("cost_type")
  quantity          Int
  unitCost          Decimal            @map("unit_cost") @db.Decimal(10, 2) @default(0.00)
  actualCost        Decimal            @map("actual_cost") @db.Decimal(10, 2) @default(0.00)
  grossProfit       Decimal            @map("gross_profit") @db.Decimal(10, 2) @default(0.00)
  contractPrice     Decimal            @map("contract_price") @db.Decimal(10, 2) @default(0.00)
  isDeleted         Boolean?           @default(false) @map("is_deleted")

  petHeaderId       Int?               @map("project_estimator_template_header_id")
  petHeader         ProjectEstimatorTemplateHeader? @relation(fields: [petHeaderId], references: [id], onDelete: Cascade)

  order             Int?               @default(0) @map("order")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("project_estimator_template_data")
}


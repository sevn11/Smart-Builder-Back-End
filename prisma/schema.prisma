// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  hash      String?
  name      String?
  userType  String   @map("user_type")
  companyId Int?     @map("company_id")
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  PermissionSet     PermissionSet?
  passwordResetCode Int?           @map("password_reset_code")
  invitationToken   String?        @map("invitation_token")

  @@map("users")
}

model Company {
  id          Int        @id @default(autoincrement())
  name        String?
  address     String?
  contact     String?
  phoneNumber String?    @map("phone_number")
  email       String?
  website     String?
  logo        String?
  users       User[]
  customers   Customer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("companies")
}

model PermissionSet {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique @map("user_id")
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullAccess     Boolean @default(false) @map("full_access")
  specifications Boolean @default(false)
  selection      Boolean @default(false)
  schedule       Boolean @default(false)
  view_only      Boolean @default(true)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("permission_sets")
}

model Customer {
  id             Int      @id @default(autoincrement())
  name           String
  address        String?
  telephone      String?
  mobileNumber1  String?   @map("mobile_number_1")
  mobileNumber2  String?   @map("mobile_number_2")
  emailAddress1  String?   @map("email_address_1")
  emailAddress2  String?   @map("email_address_2")
  employer1      String?   @map("employer_1")
  employer2      String?   @map("employer_2")
  workTelephone1 String?   @map("work_telephone_1")
  workTelephone2 String?   @map("work_telephone_2")
  isDeleted      Boolean  @map("is_deleted")
  companyId      Int     @map("company_id")
  company        Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("customers")
}
